
./bin/mi_bios.elf:     formato del fichero elf32-i386
./bin/mi_bios.elf
arquitectura: i386, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
dirección de inicio 0xfffffff0

Encabezado del Programa:
    LOAD off    0x00001000 vaddr 0xffff0000 paddr 0xffff0000 align 2**12
         filesz 0x00000088 memsz 0x00000088 flags r--
    LOAD off    0x00002000 vaddr 0x00300000 paddr 0xffff2000 align 2**12
         filesz 0x00000003 memsz 0x00000003 flags r--
    LOAD off    0x00002800 vaddr 0xfffff800 paddr 0xfffff800 align 2**12
         filesz 0x000007f8 memsz 0x000007f8 flags rwx
    LOAD off    0x00002fff vaddr 0xffffffff paddr 0xffffffff align 2**12
         filesz 0x00000001 memsz 0x00000001 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .codigo_kernel32 00000003  00300000  ffff2000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .codigo_init16 00000088  ffff0000  ffff0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .codigo_init32 00000075  fffff800  fffff800  00002800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .functions_rom 00000047  fffffc00  fffffc00  00002c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         00000026  fffffd00  fffffd00  00002d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .codigo_reset 00000008  fffffff0  fffffff0  00002ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .end_rom      00000001  ffffffff  ffffffff  00002fff  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000029  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00300000 l    d  .codigo_kernel32	00000000 .codigo_kernel32
ffff0000 l    d  .codigo_init16	00000000 .codigo_init16
fffff800 l    d  .codigo_init32	00000000 .codigo_init32
fffffc00 l    d  .functions_rom	00000000 .functions_rom
fffffd00 l    d  .data	00000000 .data
fffffff0 l    d  .codigo_reset	00000000 .codigo_reset
ffffffff l    d  .end_rom	00000000 .end_rom
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 src/main.s
00300000 l       .codigo_kernel32	00000000 kernel32_init.guard
00300003 l       .codigo_kernel32	00000000 kernel32_end
00000000 l    df *ABS*	00000000 src/init16.s
ffff000a l       .codigo_init16	00000000 A20_Enable_No_Stack_return
ffff0048 l       .codigo_init16	00000000 fault_end
ffff0049 l       .codigo_init16	00000000 A20_Enable_No_Stack
ffff0050 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_kbrd_dis
ffff0059 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_read_out
ffff005d l       .codigo_init16	00000000 A20_Enable_No_Stack.empty_8042_out
ffff0068 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_write_out
ffff0071 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_set_a20
ffff007d l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_kbrd_en
ffff0084 l       .codigo_init16	00000000 A20_Enable_No_Stack.empty_8042_in
ffff0086 l       .codigo_init16	00000000 A20_Enable_No_Stack.a20_enable_no_stack_exit
ffff0088 l       .codigo_init16	00000000 endcode
00000000 l    df *ABS*	00000000 src/init32.s
fffff81a l       .codigo_init32	00000000 start32_launcher.stack_init
fffff872 l       .codigo_init32	00000000 start32_launcher.guard
00000000 l    df *ABS*	00000000 funtions.c
00000000 l    df *ABS*	00000000 src/sys_tables.s
fffffd00 l       .data	00000000 GDT
00000000 l       *ABS*	00000000 NULL_SEL
00000020 l       *ABS*	00000000 GDT_LENGTH
00000000 l    df *ABS*	00000000 src/reset.s
fffffff5 l       .codigo_reset	00000000 halted
fffffff8 l       .codigo_reset	00000000 end
fffffff0 g       *ABS*	00000000 __RESET_LMA
ffff1000 g       *ABS*	00000000 __FUNCTIONS_LMA
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_LMA
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_LMA
00000018 g       *ABS*	00000000 DS_SEL
fffffff0 g       .codigo_reset	00000000 reset
1ff08000 g       *ABS*	00000000 __STACK_START_32
00000000 g       *ABS*	00000000 __FUNCTIONS_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_VMA
fffffd20 g       .data	00000000 _gdtr
fffffd00 g       *ABS*	00000000 __SYS_TABLES_VMA
00009000 g       *ABS*	00000000 __STACK_START_16
00300000 g       .codigo_kernel32	00000000 kernel32_init
1ff08fff g       *ABS*	00000000 __STACK_END_32
00300000 g       *ABS*	00000000 __KERNEL_32_VMA
00000010 g       *ABS*	00000000 CS_SEL_32
000003ff g       *ABS*	00000000 __STACK_SIZE_32
00009fff g       *ABS*	00000000 __STACK_END_16
ffff2000 g       *ABS*	00000000 __KERNEL_32_LMA
00000008 g       *ABS*	00000000 CS_SEL_16
fffffff0 g       *ABS*	00000000 __RESET_VMA
000f0000 g       *ABS*	00000000 __BOOT_SEG
00000003 g       *ABS*	00000000 kernel32_code_size
fffff800 g       *ABS*	00000000 __INIT_32_VMA
00060000 g       *ABS*	00000000 __EH_FRAME
ffff0000 g       .codigo_init16	00000000 start16
fffff800 g       *ABS*	00000000 __INIT_32_LMA
fffffd00 g       *ABS*	00000000 __SYS_TABLES_LMA
00000003 g       *ABS*	00000000 __codigo_kernel32_size
00050000 g       *ABS*	00000000 __DATA_NOT_INIT
fffffc00 g     F .functions_rom	00000047 __fast_memcpy_rom
fffff800 g       .codigo_init32	00000000 start32_launcher
00000000 g       *ABS*	00000000 __function_size


Contenido de la sección .codigo_kernel32:
 300000 f4ebfd                               ...             
Contenido de la sección .codigo_init16:
 ffff0000 66a90000 00007540 eb3f87db 6631c00f  f.....u@.?..f1..
 ffff0010 22d88cc8 8ed8b800 908ed0b8 ff9f89c4  "...............
 ffff0020 0f20c066 0d000000 600f22c0 0f0987db  . .f....`.".....
 ffff0030 0f011620 fd0f01e0 83c8010f 01f087db  ... ............
 ffff0040 66ea00f8 ffff1000 f431c0bf 5000eb34  f........1..P..4
 ffff0050 b0ade664 bf5900eb 2bb0d0e6 6431dbe4  ...d.Y..+...d1..
 ffff0060 6089c3bf 6800eb1c b0d1e664 bf7100eb  `...h......d.q..
 ffff0070 1389d883 c802e660 bf7d00eb 07b0aee6  .......`.}......
 ffff0080 64bf8600 ffe7eb82                    d.......        
Contenido de la sección .codigo_init32:
 fffff800 66b81800 8ed88ec0 8ee88ee0 8ed0bcff  f...............
 fffff810 8ff01f31 c0b9ff03 000050e2 fdbcff8f  ...1......P.....
 fffff820 f01f6687 db5589e5 68000000 00680000  ..f..U..h....h..
 fffff830 00006800 10ffffe8 c4030000 6687dbc9  ..h.........f...
 fffff840 83f80175 2d6687db 5589e568 03000000  ...u-f..U..h....
 fffff850 68000030 00680020 ffffe8a1 03000066  h..0.h. .......f
 fffff860 87dbc983 f801750a 6687dbea 00003000  ......u.f.....0.
 fffff870 1000f4eb fd                          .....           
Contenido de la sección .functions_rom:
 fffffc00 5589e583 ec10c645 ffff837d 10007521  U......E...}..u!
 fffffc10 b8010000 00eb2e83 6d10018b 55088d42  ........m...U..B
 fffffc20 04894508 8b450c8d 4804894d 0c8b1289  ..E..E..H..M....
 fffffc30 10837d10 0075e083 7d100075 04c645ff  ..}..u..}..u..E.
 fffffc40 010fb645 ffc9c3                      ...E...         
Contenido de la sección .data:
 fffffd00 00000000 00000000 ffff0000 ff9940ff  ..............@.
 fffffd10 ffff0000 0099cf00 ffff0000 0092cf00  ................
 fffffd20 1f0000fd 0f00                        ......          
Contenido de la sección .codigo_reset:
 fffffff0 fafce90b 00f4ebfd                    ........        
Contenido de la sección .end_rom:
 ffffffff 90                                   .               
Contenido de la sección .comment:
 0000 4743433a 20285562 756e7475 20372e35  GCC: (Ubuntu 7.5
 0010 2e302d33 7562756e 7475317e 31382e30  .0-3ubuntu1~18.0
 0020 34292037 2e352e30 00                 4) 7.5.0.       

Desensamblado de la sección .functions_rom:
fffffc00 <__fast_memcpy_rom> push   %ebp
fffffc01 <__fast_memcpy_rom+0x1> mov    %esp,%ebp
fffffc03 <__fast_memcpy_rom+0x3> sub    $0x10,%esp
fffffc06 <__fast_memcpy_rom+0x6> movb   $0xff,-0x1(%ebp)
fffffc0a <__fast_memcpy_rom+0xa> cmpl   $0x0,0x10(%ebp)
fffffc0e <__fast_memcpy_rom+0xe> jne    fffffc31 <__fast_memcpy_rom+0x31>
fffffc10 <__fast_memcpy_rom+0x10> mov    $0x1,%eax
fffffc15 <__fast_memcpy_rom+0x15> jmp    fffffc45 <__fast_memcpy_rom+0x45>
fffffc17 <__fast_memcpy_rom+0x17> subl   $0x1,0x10(%ebp)
fffffc1b <__fast_memcpy_rom+0x1b> mov    0x8(%ebp),%edx
fffffc1e <__fast_memcpy_rom+0x1e> lea    0x4(%edx),%eax
fffffc21 <__fast_memcpy_rom+0x21> mov    %eax,0x8(%ebp)
fffffc24 <__fast_memcpy_rom+0x24> mov    0xc(%ebp),%eax
fffffc27 <__fast_memcpy_rom+0x27> lea    0x4(%eax),%ecx
fffffc2a <__fast_memcpy_rom+0x2a> mov    %ecx,0xc(%ebp)
fffffc2d <__fast_memcpy_rom+0x2d> mov    (%edx),%edx
fffffc2f <__fast_memcpy_rom+0x2f> mov    %edx,(%eax)
fffffc31 <__fast_memcpy_rom+0x31> cmpl   $0x0,0x10(%ebp)
fffffc35 <__fast_memcpy_rom+0x35> jne    fffffc17 <__fast_memcpy_rom+0x17>
fffffc37 <__fast_memcpy_rom+0x37> cmpl   $0x0,0x10(%ebp)
fffffc3b <__fast_memcpy_rom+0x3b> jne    fffffc41 <__fast_memcpy_rom+0x41>
fffffc3d <__fast_memcpy_rom+0x3d> movb   $0x1,-0x1(%ebp)
fffffc41 <__fast_memcpy_rom+0x41> movzbl -0x1(%ebp),%eax
fffffc45 <__fast_memcpy_rom+0x45> leave  
fffffc46 <__fast_memcpy_rom+0x46> ret    
